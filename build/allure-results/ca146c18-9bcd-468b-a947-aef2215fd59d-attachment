<head>
</head>
<body>
<h2>alerts</h2>
<table border="1">
<tr><td>
<h2>alert</h2>
<table border="1">
<tr><td>
sourceid</td><td>
3</td></tr>
<tr><td>
other</td><td>
</td></tr>
<tr><td>
method</td><td>
GET</td></tr>
<tr><td>
evidence</td><td>
</td></tr>
<tr><td>
pluginId</td><td>
10038</td></tr>
<tr><td>
cweid</td><td>
693</td></tr>
<tr><td>
confidence</td><td>
High</td></tr>
<tr><td>
wascid</td><td>
15</td></tr>
<tr><td>
description</td><td>
Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page &mdash; covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</td></tr>
<tr><td>
messageId</td><td>
3</td></tr>
<tr><td>
url</td><td>
https://todoist.com/es</td></tr>
<tr><td>
tags</td><td>
{OWASP_2021_A05=https://owasp.org/Top10/A05_2021-Security_Misconfiguration/, OWASP_2017_A06=https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html}</td></tr>
<tr><td>
reference</td><td>
https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html
http://www.w3.org/TR/CSP/
http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
http://www.html5rocks.com/en/tutorials/security/content-security-policy/
http://caniuse.com/#feat=contentsecuritypolicy
http://content-security-policy.com/</td></tr>
<tr><td>
solution</td><td>
Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support: &quot;Content-Security-Policy&quot; for Chrome 25+, Firefox 23+ and Safari 7+, &quot;X-Content-Security-Policy&quot; for Firefox 4.0+ and Internet Explorer 10+, and &quot;X-WebKit-CSP&quot; for Chrome 14+ and Safari 6+.</td></tr>
<tr><td>
alert</td><td>
Content Security Policy (CSP) Header Not Set</td></tr>
<tr><td>
param</td><td>
</td></tr>
<tr><td>
attack</td><td>
</td></tr>
<tr><td>
name</td><td>
Content Security Policy (CSP) Header Not Set</td></tr>
<tr><td>
risk</td><td>
Medium</td></tr>
<tr><td>
id</td><td>
0</td></tr>
<tr><td>
alertRef</td><td>
10038</td></tr>
</table>
</td></tr>
<tr><td>
<h2>alert</h2>
<table border="1">
<tr><td>
sourceid</td><td>
3</td></tr>
<tr><td>
other</td><td>
</td></tr>
<tr><td>
method</td><td>
GET</td></tr>
<tr><td>
evidence</td><td>
set-cookie: next-i18next</td></tr>
<tr><td>
pluginId</td><td>
10010</td></tr>
<tr><td>
cweid</td><td>
1004</td></tr>
<tr><td>
confidence</td><td>
Medium</td></tr>
<tr><td>
wascid</td><td>
13</td></tr>
<tr><td>
description</td><td>
A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.</td></tr>
<tr><td>
messageId</td><td>
3</td></tr>
<tr><td>
url</td><td>
https://todoist.com/es</td></tr>
<tr><td>
tags</td><td>
{OWASP_2021_A05=https://owasp.org/Top10/A05_2021-Security_Misconfiguration/, WSTG-v42-SESS-02=https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes, OWASP_2017_A06=https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html}</td></tr>
<tr><td>
reference</td><td>
https://owasp.org/www-community/HttpOnly</td></tr>
<tr><td>
solution</td><td>
Ensure that the HttpOnly flag is set for all cookies.</td></tr>
<tr><td>
alert</td><td>
Cookie No HttpOnly Flag</td></tr>
<tr><td>
param</td><td>
next-i18next</td></tr>
<tr><td>
attack</td><td>
</td></tr>
<tr><td>
name</td><td>
Cookie No HttpOnly Flag</td></tr>
<tr><td>
risk</td><td>
Low</td></tr>
<tr><td>
id</td><td>
1</td></tr>
<tr><td>
alertRef</td><td>
10010</td></tr>
</table>
</td></tr>
<tr><td>
<h2>alert</h2>
<table border="1">
<tr><td>
sourceid</td><td>
3</td></tr>
<tr><td>
other</td><td>
</td></tr>
<tr><td>
method</td><td>
GET</td></tr>
<tr><td>
evidence</td><td>
set-cookie: _csrf</td></tr>
<tr><td>
pluginId</td><td>
10010</td></tr>
<tr><td>
cweid</td><td>
1004</td></tr>
<tr><td>
confidence</td><td>
Medium</td></tr>
<tr><td>
wascid</td><td>
13</td></tr>
<tr><td>
description</td><td>
A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.</td></tr>
<tr><td>
messageId</td><td>
3</td></tr>
<tr><td>
url</td><td>
https://todoist.com/es</td></tr>
<tr><td>
tags</td><td>
{OWASP_2021_A05=https://owasp.org/Top10/A05_2021-Security_Misconfiguration/, WSTG-v42-SESS-02=https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes, OWASP_2017_A06=https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html}</td></tr>
<tr><td>
reference</td><td>
https://owasp.org/www-community/HttpOnly</td></tr>
<tr><td>
solution</td><td>
Ensure that the HttpOnly flag is set for all cookies.</td></tr>
<tr><td>
alert</td><td>
Cookie No HttpOnly Flag</td></tr>
<tr><td>
param</td><td>
_csrf</td></tr>
<tr><td>
attack</td><td>
</td></tr>
<tr><td>
name</td><td>
Cookie No HttpOnly Flag</td></tr>
<tr><td>
risk</td><td>
Low</td></tr>
<tr><td>
id</td><td>
2</td></tr>
<tr><td>
alertRef</td><td>
10010</td></tr>
</table>
</td></tr>
<tr><td>
<h2>alert</h2>
<table border="1">
<tr><td>
sourceid</td><td>
3</td></tr>
<tr><td>
other</td><td>
</td></tr>
<tr><td>
method</td><td>
GET</td></tr>
<tr><td>
evidence</td><td>
set-cookie: next-i18next</td></tr>
<tr><td>
pluginId</td><td>
10054</td></tr>
<tr><td>
cweid</td><td>
1275</td></tr>
<tr><td>
confidence</td><td>
Medium</td></tr>
<tr><td>
wascid</td><td>
13</td></tr>
<tr><td>
description</td><td>
Una cookie ha sido enviada sin el atributo SameSite, lo que significa que la cookie puede ser enviada como un resultado de una solicitud 'cross-site'. 
El atributo SameSite es una medida efectiva contra solicitudes de falsificaci&oacute;n de cross-site, inclusi&oacute;n de secuencias cross-site, y ataques sincronizados.</td></tr>
<tr><td>
messageId</td><td>
3</td></tr>
<tr><td>
url</td><td>
https://todoist.com/es</td></tr>
<tr><td>
tags</td><td>
{OWASP_2021_A01=https://owasp.org/Top10/A01_2021-Broken_Access_Control/, WSTG-v42-SESS-02=https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes, OWASP_2017_A05=https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html}</td></tr>
<tr><td>
reference</td><td>
https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site</td></tr>
<tr><td>
solution</td><td>
Aseg&uacute;rese que el atributo SameSite est&aacute; establecido como 'lax' o idealmente 'strict' para todas las cookies.</td></tr>
<tr><td>
alert</td><td>
Cookie without SameSite Attribute</td></tr>
<tr><td>
param</td><td>
next-i18next</td></tr>
<tr><td>
attack</td><td>
</td></tr>
<tr><td>
name</td><td>
Cookie without SameSite Attribute</td></tr>
<tr><td>
risk</td><td>
Low</td></tr>
<tr><td>
id</td><td>
3</td></tr>
<tr><td>
alertRef</td><td>
10054</td></tr>
</table>
</td></tr>
<tr><td>
<h2>alert</h2>
<table border="1">
<tr><td>
sourceid</td><td>
3</td></tr>
<tr><td>
other</td><td>
</td></tr>
<tr><td>
method</td><td>
GET</td></tr>
<tr><td>
evidence</td><td>
set-cookie: _csrf</td></tr>
<tr><td>
pluginId</td><td>
10054</td></tr>
<tr><td>
cweid</td><td>
1275</td></tr>
<tr><td>
confidence</td><td>
Medium</td></tr>
<tr><td>
wascid</td><td>
13</td></tr>
<tr><td>
description</td><td>
Una cookie ha sido enviada sin el atributo SameSite, lo que significa que la cookie puede ser enviada como un resultado de una solicitud 'cross-site'. 
El atributo SameSite es una medida efectiva contra solicitudes de falsificaci&oacute;n de cross-site, inclusi&oacute;n de secuencias cross-site, y ataques sincronizados.</td></tr>
<tr><td>
messageId</td><td>
3</td></tr>
<tr><td>
url</td><td>
https://todoist.com/es</td></tr>
<tr><td>
tags</td><td>
{OWASP_2021_A01=https://owasp.org/Top10/A01_2021-Broken_Access_Control/, WSTG-v42-SESS-02=https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes, OWASP_2017_A05=https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html}</td></tr>
<tr><td>
reference</td><td>
https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site</td></tr>
<tr><td>
solution</td><td>
Aseg&uacute;rese que el atributo SameSite est&aacute; establecido como 'lax' o idealmente 'strict' para todas las cookies.</td></tr>
<tr><td>
alert</td><td>
Cookie without SameSite Attribute</td></tr>
<tr><td>
param</td><td>
_csrf</td></tr>
<tr><td>
attack</td><td>
</td></tr>
<tr><td>
name</td><td>
Cookie without SameSite Attribute</td></tr>
<tr><td>
risk</td><td>
Low</td></tr>
<tr><td>
id</td><td>
4</td></tr>
<tr><td>
alertRef</td><td>
10054</td></tr>
</table>
</td></tr>
<tr><td>
<h2>alert</h2>
<table border="1">
<tr><td>
sourceid</td><td>
3</td></tr>
<tr><td>
other</td><td>
</td></tr>
<tr><td>
method</td><td>
GET</td></tr>
<tr><td>
evidence</td><td>
set-cookie: next-i18next</td></tr>
<tr><td>
pluginId</td><td>
10011</td></tr>
<tr><td>
cweid</td><td>
614</td></tr>
<tr><td>
confidence</td><td>
Medium</td></tr>
<tr><td>
wascid</td><td>
13</td></tr>
<tr><td>
description</td><td>
A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.</td></tr>
<tr><td>
messageId</td><td>
3</td></tr>
<tr><td>
url</td><td>
https://todoist.com/es</td></tr>
<tr><td>
tags</td><td>
{OWASP_2021_A05=https://owasp.org/Top10/A05_2021-Security_Misconfiguration/, WSTG-v42-SESS-02=https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes, OWASP_2017_A06=https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html}</td></tr>
<tr><td>
reference</td><td>
https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html</td></tr>
<tr><td>
solution</td><td>
Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.</td></tr>
<tr><td>
alert</td><td>
Cookie Without Secure Flag</td></tr>
<tr><td>
param</td><td>
next-i18next</td></tr>
<tr><td>
attack</td><td>
</td></tr>
<tr><td>
name</td><td>
Cookie Without Secure Flag</td></tr>
<tr><td>
risk</td><td>
Low</td></tr>
<tr><td>
id</td><td>
5</td></tr>
<tr><td>
alertRef</td><td>
10011</td></tr>
</table>
</td></tr>
<tr><td>
<h2>alert</h2>
<table border="1">
<tr><td>
sourceid</td><td>
3</td></tr>
<tr><td>
other</td><td>
</td></tr>
<tr><td>
method</td><td>
GET</td></tr>
<tr><td>
evidence</td><td>
set-cookie: _csrf</td></tr>
<tr><td>
pluginId</td><td>
10011</td></tr>
<tr><td>
cweid</td><td>
614</td></tr>
<tr><td>
confidence</td><td>
Medium</td></tr>
<tr><td>
wascid</td><td>
13</td></tr>
<tr><td>
description</td><td>
A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.</td></tr>
<tr><td>
messageId</td><td>
3</td></tr>
<tr><td>
url</td><td>
https://todoist.com/es</td></tr>
<tr><td>
tags</td><td>
{OWASP_2021_A05=https://owasp.org/Top10/A05_2021-Security_Misconfiguration/, WSTG-v42-SESS-02=https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes, OWASP_2017_A06=https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html}</td></tr>
<tr><td>
reference</td><td>
https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html</td></tr>
<tr><td>
solution</td><td>
Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.</td></tr>
<tr><td>
alert</td><td>
Cookie Without Secure Flag</td></tr>
<tr><td>
param</td><td>
_csrf</td></tr>
<tr><td>
attack</td><td>
</td></tr>
<tr><td>
name</td><td>
Cookie Without Secure Flag</td></tr>
<tr><td>
risk</td><td>
Low</td></tr>
<tr><td>
id</td><td>
6</td></tr>
<tr><td>
alertRef</td><td>
10011</td></tr>
</table>
</td></tr>
<tr><td>
<h2>alert</h2>
<table border="1">
<tr><td>
sourceid</td><td>
3</td></tr>
<tr><td>
other</td><td>
The following pattern was used: \bTODO\b and was detected in the element starting with: &quot;&lt;script id=&quot;__NEXT_DATA__&quot; type=&quot;application/json&quot;&gt;{&quot;props&quot;:{&quot;pageProps&quot;:{&quot;webpSupport&quot;:true,&quot;isAuthenticated&quot;:false,&quot;cookies&quot;:{&quot;, see evidence field for the suspicious comment/snippet.</td></tr>
<tr><td>
method</td><td>
GET</td></tr>
<tr><td>
evidence</td><td>
Todo</td></tr>
<tr><td>
pluginId</td><td>
10027</td></tr>
<tr><td>
cweid</td><td>
200</td></tr>
<tr><td>
confidence</td><td>
Low</td></tr>
<tr><td>
wascid</td><td>
13</td></tr>
<tr><td>
description</td><td>
The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.</td></tr>
<tr><td>
messageId</td><td>
3</td></tr>
<tr><td>
url</td><td>
https://todoist.com/es</td></tr>
<tr><td>
tags</td><td>
{OWASP_2021_A01=https://owasp.org/Top10/A01_2021-Broken_Access_Control/, OWASP_2017_A03=https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html}</td></tr>
<tr><td>
reference</td><td>
</td></tr>
<tr><td>
solution</td><td>
Eliminar todos los comentarios que devuelvan informaci&oacute;n que podr&iacute;a ayudar a un atacante y arreglar cualquier problema subyacente al que se refieran.</td></tr>
<tr><td>
alert</td><td>
Divulgaci&oacute;n de informaci&oacute;n - Comentarios sospechosos</td></tr>
<tr><td>
param</td><td>
</td></tr>
<tr><td>
attack</td><td>
</td></tr>
<tr><td>
name</td><td>
Divulgaci&oacute;n de informaci&oacute;n - Comentarios sospechosos</td></tr>
<tr><td>
risk</td><td>
Informational</td></tr>
<tr><td>
id</td><td>
7</td></tr>
<tr><td>
alertRef</td><td>
10027</td></tr>
</table>
</td></tr>
<tr><td>
<h2>alert</h2>
<table border="1">
<tr><td>
sourceid</td><td>
3</td></tr>
<tr><td>
other</td><td>
This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.</td></tr>
<tr><td>
method</td><td>
GET</td></tr>
<tr><td>
evidence</td><td>
</td></tr>
<tr><td>
pluginId</td><td>
10021</td></tr>
<tr><td>
cweid</td><td>
693</td></tr>
<tr><td>
confidence</td><td>
Medium</td></tr>
<tr><td>
wascid</td><td>
15</td></tr>
<tr><td>
description</td><td>
The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</td></tr>
<tr><td>
messageId</td><td>
3</td></tr>
<tr><td>
url</td><td>
https://todoist.com/es</td></tr>
<tr><td>
tags</td><td>
{OWASP_2021_A05=https://owasp.org/Top10/A05_2021-Security_Misconfiguration/, OWASP_2017_A06=https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html}</td></tr>
<tr><td>
reference</td><td>
http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://owasp.org/www-community/Security_Headers</td></tr>
<tr><td>
solution</td><td>
Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</td></tr>
<tr><td>
alert</td><td>
X-Content-Type-Options Header Missing</td></tr>
<tr><td>
param</td><td>
X-Content-Type-Options</td></tr>
<tr><td>
attack</td><td>
</td></tr>
<tr><td>
name</td><td>
X-Content-Type-Options Header Missing</td></tr>
<tr><td>
risk</td><td>
Low</td></tr>
<tr><td>
id</td><td>
8</td></tr>
<tr><td>
alertRef</td><td>
10021</td></tr>
</table>
</td></tr>
</table>
</body>
